Копирование/Вставка МЕТОДОЛОГИЧЕСКИЙ, нарушение DRY
- /app.php - 4 раза повторяется
db::getInstance()->Connect(Config::get('db_user'), Config::get('db_password'), Config::get('db_base'), Config::get('db_host'));

Спагетти-код В КОДЕ
- в целом особо не заметил, в большом количество и сильно запутанного, но например в /app.php
есть смешение работы с корзиной и заказами. Вызвано в принципе другой проблемой (то, что класс Basket очень большой),
но мне кажется спагетти-код немного присутствует

- но если учесть еще и скрипты на фронтенде - то проблема спагетти-кода еще более серьезна.
не совсем четкая логика взаимодействия. частично дублируется функционал на фронтенде и бекенде.
по идее надо облегчать фронтенд и дублируемый функционал оставлять на сервере.

-также в /lib/Auth.class.php - класс, который по идее авторизацией занимается, есть метод регистрации нового пользователя..
что-то не то.

Слепая вера В КОДЕ и фактор невероятности МЕТОДОЛОГИЧЕСКИЙ
-недостаточная проверка возвращаемых значений при работе с методами в /lib/Basket.class.php
а например в строке 342 вообще есть баг (который не повлиял на работу - но он есть) - вместо результата вставки,
в том случае если все получилось - возвращается сам sql запрос в виде строки.
(в случае если не получилось, делается новый с update, но потом тоже sql запрос возвращается)
и далее он попадает в строку 191 - где другой метод уже тоже возвращает этот ответ.
далее строка 69 - возвращает дальше уже наружу класса, так как это уже публичный метод add


Магические числа В КОДЕ
/lib/Product.class.php
строка 5 и 44 - лучше вынести в константы, и может быть в конфиге - это количество элементов каталога на странице

Божественный объект В КОДЕ
/lib/Basket.php - очень много функционала в корзине. плюс еще не ее функционал (работа с заказами)

Сплошное одиночество В КОДЕ
/lib/db.class.php и /lib/Basket.class.php - реализованы как синглтоны.
по идее надо бы без синглтонов обойтись.

Золотой молоток МЕТОДОЛОГИЧЕСКИЙ
-может и не совсем к этому относится - но у меня есть склонность к использованию static методов.
возможно это излишне, и хотя решает какие-то вопросы, но приводит к вырождению использования ООП.
как уже упоминал, такое ощущение, что классы становятся хранилищами для методов.

Большой комок грязи АРХИТЕКТУРНЫЙ
-в связи с тем что перемешан функционал фронтенда и бекенда, идет дублирование.
не совсем ясно зачем и с какой целью
(причины появления понятны - связаны с тем, что проект учебный и изначально разрабатывался поэтапно, без "взгляда вперед")
но переделать надо в первую очередь архитектурный подход, связь/функционал фронтенда/бекенда
